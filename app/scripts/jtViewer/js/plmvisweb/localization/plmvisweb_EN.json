{
	"CONTROL_LOGGER_Constructor": "Control- Inside PLMVisWeb Control constructor.",
	"CONTROL_LOGGER_getDomElement": "Control- getDomElement API- Fetching the HTML Element representing the control.",
	"CONTROL_LOGGER_setSize": "Control- setSize API- Updating the size of the control.",
	"CONTROL_LOGGER_getSize": "Control- getSize API- Returning the size of the control.",

	"VIEWER_LOGGER_Constructor": "PLMVis JavaScript toolkit Viewer constructor.",
	"VIEWER_LOGGER_startRenderLoop": "startRenderLoop API : starting render loop.",
	"VIEWER_CONSOLE_startRenderLoop": "Viewer must be initialized ( viewer.init(); ) before starting the render loop.",
	"VIEWER_LOGGER_stopRenderLoopDeferred": "stopRenderLoopDeferred API :render loop deffered.",
	"VIEWER_LOGGER_stopRenderLoop": "stopRenderLoopDeferred API :render loop stopped.",
	"VIEWER_LOGGER_getSelectedParts": "getSelectedParts API : getting selected parts.",
	"VIEWER_LOGGER_finest_getSelectedParts": "getSelectedParts API : selected object with psid : " ,
	"VIEWER_LOGGER_setMouseNavigationEnabled": "setMouseNavigationEnabled API : setting mouse navigation to :",
	"VIEWER_LOGGER_warn_setMouseNavigationEnabled": "setMouseNavigationEnabled API : camera controls are not defined.",
	"VIEWER_LOGGER_getMouseNavigationEnabled": "getMouseNavigationEnabled API : returning mouse navigation status.",
	"VIEWER_LOGGER_clearScene": "clearScene API :clearing the scene.",
	"VIEWER_LOGGER_fine_clearScene": "clearScene API : clearing the existing  extensions.",
	"VIEWER_LOGGER_finest_clearScene": "clearScene API : clearing the extension:",
	"VIEWER_LOGGER_finest2_clearScene": "clearScene API : This extension will not be cleared :",
	"VIEWER_LOGGER_info2_clearScene": "clearScene API : scene cleared.",
	"VIEWER_LOGGER_setSelectionByPsId": "setSelectionByPsId API: updating selection of the object with psid:",
	"VIEWER_LOGGER_getSelectionByPsId": "getSelectionByPsId API: get selection information of the object with psid:",
	"VIEWER_LOGGER_getCameraMode": "getCameraMode API: returning camera mode.",
	"VIEWER_LOGGER_setCameraMode": "setCameraMode API: updating camera mode to:" ,
	"VIEWER_LOGGER_setMouseNavigationMode": "setMouseNavigationMode API: updating mouse navigation mode to:",
	"VIEWER_LOGGER_getMouseNavigationMode":"getMouseNavigationMode API: returning mouse navigation mode.",
	"VIEWER_LOGGER_fitAll":"fitAll API: moving camera to fit all the geomtery into view.",
	"VIEWER_LOGGER_info2_fitAll":"fitAll API: moving camera to fit all the visible geometry into view.",
	"VIEWER_LOGGER_warn_fitAll":"fitAll API: model bounding box is empty.",
	"VIEWER_LOGGER_setSize":"setSize API: setting the size of the rendered window to height and width:" ,
	"VIEWER_LOGGER_finest_setSize":"setSize API: updating camera controls.",
	"VIEWER_LOGGER_getWebGLContext":"getWebGLContext API: returning the wenGL context.",
	"VIEWER_LOGGER_setPickingEnabled":"setPickingEnabled API: updating the picking enable state.",
	"VIEWER_LOGGER_getPickingEnabled":"getPickingEnabled API: returning if the picking is enabled or not",
	"VIEWER_LOGGER_registerProgressEvent":"registerProgressEvent API: registering the progress event.",
	"VIEWER_LOGGER_unregisterProgressEvent":"unregisterProgressEvent API: unregistering the progress event.",
	"VIEWER_LOGGER_registerSelectionEvent":"registerSelectionEvent API: registering the selection event.",
	"VIEWER_LOGGER_unregisterSelectionEvent":"unregisterSelectionEvent API: unregistering the selection event.",
	"VIEWER_LOGGER_open":"open API: opening the model.",
	"VIEWER_LOGGER_importModel":"importModel API: importing the model.",
	"VIEWER_LOGGER_openWithObject":"openWithObject API: Opening a model with json object :" ,
	"VIEWER_LOGGER_finest_openWithObject":"openWithObject API: open successfully loaded with rootID:",
	"VIEWER_LOGGER_importModelWithObject":"importModelWithObject API: Importing  model with json object :",
	"VIEWER_LOGGER_setVisibilityByPsId":"setVisibilityByPsId API: Updating visibility of the object with psid :" ,
	"VIEWER_LOGGER_finest_setVisibilityByPsId":"setVisibilityByPsId API: Updated the visibility.",
	"VIEWER_LOGGER_finest2_setVisibilityByPsId":"setVisibilityByPsId API: Updating visibility of the children object with psid:" ,
	"VIEWER_LOGGER_warn_setVisibilityByPsId":"setVisibilityByPsId API: Object with the given psid is null or undefined." ,
	"VIEWER_LOGGER_setEdgesVisibilityByPsId":"setEdgesVisibilityByPsId API: Updating visibility of the edges with psid :",
	"VIEWER_LOGGER_finest_setEdgesVisibilityByPsId":"setEdgesVisibilityByPsId API:Loading edges and vertices for object :",
	"VIEWER_LOGGER_finest_getEdgesVisibilityByPsId":"getEdgesVisibilityByPsId API: returning visibility of the edges with psid :",
	"VIEWER_LOGGER_finest_warn_getEdgesVisibilityByPsId":"getEdgesVisibilityByPsId API: object is undefined or null",
	"VIEWER_LOGGER_setVerticesVisibilityByPsId":"setVerticesVisibilityByPsId API: returning visibility of the vertices with psid :",
	"VIEWER_LOGGER_finest_setVerticesVisibilityByPsId":"setVerticesVisibilityByPsId API:Loading edges and vertices for object :",
	"VIEWER_LOGGER_getVerticesVisibilityByPsId":"getVerticesVisibilityByPsId API: returning visibility of the edges with psid :",
	"VIEWER_LOGGER_warn_getVerticesVisibilityByPsId":"getVerticesVisibilityByPsId API: object is undefined or null.",
	"VIEWER_LOGGER_getVisibilityByPsId":"getVisibilityByPsId API: returning visibility of the edges with psid :",
	"VIEWER_LOGGER_warn_getVisibilityByPsId":"getVisibilityByPsId API: object is undefined or null.",
	"VIEWER_LOGGER_getNameByPsId":"getNameByPsId API: returning the name of the object with psid: :",
	"VIEWER_LOGGER_warn_getNameByPsId":"getNameByPsId API: object is undefined or null.",
	"VIEWER_LOGGER_setDownloadLimit":"setDownloadLimit API: updating the download limit to:",
	"VIEWER_LOGGER_getDownloadLimit":"getDownloadLimit API: returning the download limit.",
	"VIEWER_LOGGER_setDownloadTick":"setDownloadTick API: updating the download tick value.",
	"VIEWER_LOGGER_getDownloadTick":"getDownloadTick API: returning the download tick value.",
	"VIEWER_LOGGER_rotateAboutSelectedPoint":"rotateAboutSelectedPoint API: updating the flag to rotate about selected point to the value :",
	"VIEWER_LOGGER_isRotatingAboutSelectedPoint":"isRotatingAboutSelectedPoint API: Returning whether rotation center is updated not not.",
	"VIEWER_LOGGER_selectNone":"selectNone API: clearing the selection in the scene.",
	"VIEWER_LOGGER_draw":"draw API: forcing a render call.",
	"VIEWER_LOGGER_translateByPsId":"translateByPsId API: Applying a transformation to the object identified with the specified psid",
	"VIEWER_LOGGER_finest_translateByPsId":"translateByPsId API:object is found with the given psid",
	"VIEWER_LOGGER_rotateByPsId":"rotateByPsId API: Applying a rotation to the object identified with the specified psid.",
	"VIEWER_LOGGER_setMaterialByPsId":"setMaterialByPsId API: Updating the various material attributes for the object with the specified psid.",
	"VIEWER_LOGGER_resetMaterialByPsId":"resetMaterialByPsId API: Reseting a part/assembly to its original material.",
	"VIEWER_LOGGER_setSelectionModes":"setSelectionModes API: Updating selection modes.",
	"VIEWER_LOGGER_setSelectionMode":"setSelectionMode API: Updating selection mode.",
	"VIEWER_LOGGER_finest_setSelectionMode":"setSelectionMode API: Selection mode is updated to :",
	"VIEWER_LOGGER_getSelectionMode":"getSelectionMode API: returning the selection mode.",
	"VIEWER_LOGGER_setCameraOrientation":"setCameraOrientation API: setting the camera orientation to: ",
	"VIEWER_LOGGER_finest_setCameraOrientation":"setCameraOrientation API: camera orientation updated successfully.",
	"VIEWER_LOGGER_registerVisibilityChangeEventByPsId":"registerVisibilityChangeEventByPsId API: Registering visibility change event for the object with given psid.",
	"VIEWER_LOGGER_finest_registerVisibilityChangeEventByPsId":"registerVisibilityChangeEventByPsId API:visibility change event for the object with given psid registered successfully.",
	"VIEWER_LOGGER_unregisterVisibilityChangeEventByPsId":"unregisterVisibilityChangeEventByPsId API: Unregistering visibility change event for the object with given psid.",
	"VIEWER_LOGGER_finest_unregisterVisibilityChangeEventByPsId":"unregisterVisibilityChangeEventByPsId API:visibility change event for the object with given psid unregistered successfully.",
	"VIEWER_LOGGER_registerSelectionChangeEventByPsId":"registerSelectionChangeEventByPsId API:registering selection change event for the object with given psid",
	"VIEWER_LOGGER_finest_registerSelectionChangeEventByPsId":"registerSelectionChangeEventByPsId API:selection change event for the object with given psid registered successfully.",
	"VIEWER_LOGGER_unregisterSelectionChangeEventByPsId":"unregisterSelectionChangeEventByPsId API: Unregistering selection change event for the object with given psid.",
	"VIEWER_LOGGER_finest_unregisterSelectionChangeEventByPsId":"unregisterSelectionChangeEventByPsId API:Selection change event for the object with given psid unregistered successfully.",
	"VIEWER_LOGGER_getProductStructureInfo":"getProductStructureInfo API:Returning the product struction information.",
	"VIEWER_LOGGER_setSelectionMaterial":"setSelectionMaterial API:Updating the selection material to given values.",
	"VIEWER_LOGGER_setHighlightingMaterial":"setHighlightingMaterial API:Updating the highlight material to given values.",
	"VIEWER_LOGGER_setCameraOrientationInfo":"setCameraOrientationInfo API:Updating camera orientation information.",
	"VIEWER_LOGGER_getCameraOrientationInfo":"getCameraOrientationInfo API:returning camera orientation information.",
	"VIEWER_LOGGER_modelHasPmi":"modelHasPmi API:Checking if the model has pmi data.",
	"VIEWER_LOGGER_modelHasXt":"modelHasXt API:Checking if the model has xt data.",
	"VIEWER_LOGGER_warn_modelHasXt":"modelHasXt API:given model is undefined.",
	"VIEWER_LOGGER_unloadGeometryByPsId":"unloadGeometryByPsId API:unloading geometry of the object with given psid.",
	"VIEWER_LOGGER_loadGeometryByPsId":"loadGeometryByPsId API:loading geometry of the object with given psid.",
	"VIEWER_LOGGER_setDrawWhileLoading":"setDrawWhileLoading API:updating the drawWhileLoading to:",
	"VIEWER_LOGGER_getDrawWhileLoading":"getDrawWhileLoading API:returning the drawWhileLoading flag value.",
	"VIEWER_LOGGER_setAutoDraw":"setAutoDraw API:updating the autoDraw to:",
	"VIEWER_LOGGER_getAutoDraw":"getAutoDraw API:returning the autoDraw flag value.",
	"VIEWER_LOGGER_setDrawPerParts":"setDrawPerParts API:updating the no of pats to be loaded before calling render to :",
	"VIEWER_LOGGER_getDrawPerParts":"getDrawPerParts API:returning the no of parts that will be loaded before calling render.",
	"VIEWER_LOGGER_applyTransformationMatrixByPsId":"applyTransformationMatrixByPsId API:Applyting the given transformation matrix to the object.",
	"VIEWER_LOGGER_setDragFlag":"setDragFlag API: Updating the value of the drag flag.",
	"VIEWER_LOGGER_getDragFlag":"getDragFlag API:Returning the value of the drag flag.",
	"VIEWER_LOGGER_setDragAxes":"setDragAxes API: Updating the value of the drag axes to:",
	"VIEWER_LOGGER_finest_setDragAxes":"setDragAxes API: Updated the value of the drag AXes to:",
	"VIEWER_LOGGER_getDragAxes":"getDragAxes API: Returning the value of the drag axes.",
	"VIEWER_LOGGER_setDragSpriteOnly":"setDragSpriteOnly API:Updating the value of the flag which decided whether drag/drop is limited to sprites.",
	"VIEWER_LOGGER_getDragSpriteOnly":"getDragSpriteOnly API:Returning the value of the flag which decided whether drag/drop is limited to sprites.",
	"VIEWER_LOGGER_isRendering":"isRendering API: Returning the render loop running state.",
	"VIEWER_LOGGER_overrideMouseNavigationControls":"overrideMouseNavigationControls API: Overriding the mouse navigation controls with a custom controller.",
	"VIEWER_LOGGER_addImageToScene":"addImageToScene API:Adding image to the scene.",
	"VIEWER_LOGGER_getPsIdAtViewCoordinate":"getPsIdAtViewCoordinate API:Returning the psId of the object at the given view coordinate.",
	"VIEWER_LOGGER_finest_getPsIdAtViewCoordinate":"getPsIdAtViewCoordinate API:PsId is:",
	"VIEWER_LOGGER_warn_getPsIdAtViewCoordinate":"getPsIdAtViewCoordinate API:Coordinate is null or undefined.",
	"VIEWER_CONSOLE_jsonExport":"jsonExport is deprecated.  Please use exportProductStructure instead.",
	"VIEWER_LOGGER_exportProductStructure":"exportProductStructure API: Returning Javscript object with the json data of the product structure in the viewer.",
	"VIEWER_LOGGER_finest_exportProductStructure":"exportProductStructure API: Json object is:",
	"VIEWER_LOGGER_setDefaultMaterialSide":"setDefaultMaterialSide API:Updating default material behavior.",
	"VIEWER_LOGGER_getDefaultMaterialSide":"getDefaultMaterialSide API:Returning default material behavior.",
	"VIEWER_LOGGER_setBackgroundColor":"setBackgroundColor API:Updating default background color to :" ,
	"VIEWER_LOGGER_getActiveCameraControl":"getActiveCameraControl API:Getting the custom camera control object.",
	"VIEWER_LOGGER_setTransformationMatrixByPsId":"setTransformationMatrixByPsId API:Updating the local transformation matrix of the object.",
	"VIEWER_LOGGER_getTransformationMatrixByPsId":"getTransformationMatrixByPsId API:Returning the local transformation matrix of the object.",
	"VIEWER_LOGGER_warn_getTransformationMatrixByPsId":"getTransformationMatrixByPsId API:object with the given psid is null or undefined",
	"VIEWER_LOGGER_getBoundingBoxCenterByPsId":"getBoundingBoxCenterByPsId API:Returning the center of a part/assembly bounding box.",
	"VIEWER_LOGGER_warn_getBoundingBoxCenterByPsId":"getBoundingBoxCenterByPsId API:object with the given psid is null or undefined",
	"VIEWER_LOGGER_getVisibleModelBoundingBoxCenter":"getVisibleModelBoundingBoxCenter API:Returning the center of visible part/assembly structure bounding box.",
	"VIEWER_LOGGER_warn_getVisibleModelBoundingBoxCenter":"getVisibleModelBoundingBoxCenter API:Bounding box is empty.",
	"VIEWER_LOGGER_finest_getVisibleModelBoundingBoxCenter":"getVisibleModelBoundingBoxCenter API:Bounding box is not empty with center:",
	"VIEWER_LOGGER_setCameraOrientationFromPLMXML":"setCameraOrientationFromPLMXML API:Updating the camera orientation according to the given plmxml file.",
	"VIEWER_LOGGER_warn_setCameraOrientationFromPLMXML":"setCameraOrientationFromPLMXML API:Failed to receive XMLHttpRequest data.",
	"VIEWER_LOGGER_warn3_setCameraOrientationFromPLMXML":"setCameraOrientationFromPLMXML API:Failed to retrieve ",
	"VIEWER_LOGGER_finest_setCameraOrientationFromPLMXML":"setCameraOrientationFromPLMXML API: camera orientation has been updated successfully according to the given plmxml file",
	"VIEWER_LOGGER_warn2_setCameraOrientationFromPLMXML":"setCameraOrientationFromPLMXML API:Failed to receive XMLHttpRequest response.",
	"GENERAL_CONSOLE_warn_FailedRequest":"Failed to receive XMLHttpRequest data!",
	"GENERAL_CONSOLE_warn_FailedResponse":"Failed to receive XMLHttpRequest response!",
	"GENERAL_CONSOLE_err_FailedToRetrieve":"Failed to retrieve.",
	"VIEWER_LOGGER_setCameraToStandardView":"setCameraToStandardView API:Updating the camera orientation according to the given plmxml file.",
	"VIEWER_LOGGER_getTextureTransparencyDefault":"getTextureTransparencyDefault API:checking whether materials with textures will be treated as transparent objects.",
	"VIEWER_LOGGER_setTextureTransparencyDefault":"setTextureTransparencyDefault API:Updating whether materials with textures will be treated as transparent objects.",
	"VIEWER_LOGGER_setPartMaterial":"setPartMaterial API:Applying advanced material to the selected part.",
	"VIEWER_LOGGER_getObjectTypeByPsId":"getObjectTypeByPsId API:Finding the type of geometry an object refers to.",
	"VIEWER_LOGGER_setFaceWireframeVisibilityByPsId":"setFaceWireframeVisibilityByPsId API:Finding the type of geometry an object refers to.",
	"VIEWER_LOGGER_getFaceWireframeVisibilityByPsId":"getFaceWireframeVisibilityByPsId API:Returning the visibility of the face wire frames for the given PSID.",
	"VIEWER_LOGGER_warn_getFaceWireframeVisibilityByPsId":"getFaceWireframeVisibilityByPsId API:Object is either not defined or null.",
	"VIEWER_CONSOLE_setVerticeSelectionByIndex":"PLMVisWeb.Viewer.setVerticeSelectionByIndex is deprecated.Use PLMVisWeb.Viewer.setVerticesSelectionByIndex instead.",
	"VIEWER_LOGGER_setVerticesSelectionByIndex":"setVerticesSelectionByIndex API:Updating the selection state for a given array of vertices.",
	"VIEWER_CONSOLE_warn__setObjectSelection":"Encountered unknown object (%d) during selection.",

	"PMI_LOGGER_registerVisibilityChangeEventByPsId": "PMI-registerVisibilityChangeEventByPsId API: Registers the given visibility change event on a specific object.",
	"PMI_LOGGER_unregisterVisibilityChangeEventByPsId": "PMI-unregisterVisibilityChangeEventByPsId API: Unregistering the given visibility change event on a specific object.",
	"PMI_LOGGER_registerSelectionChangeEventByPsId": "PMI-registerSelectionChangeEventByPsId API: registering the given selection change event on a specific object.",
	"PMI_LOGGER_unregisterSelectionChangeEventByPsId": "PMI-unregisterSelectionChangeEventByPsId API: unregistering the given selection change event on a specific object.",
	"PMI_LOGGER_loadPmiData": "PMI-loadPmiData API: Loading PMI data from plm_pmi.json.",
	"PMI_LOGGER_finest_loadPmiData": "PMI-loadPmiData API: Pmi data is loaded.",
	"PMI_LOGGER_warn_loadPmiData": "PMI-loadPmiData API: Object with the given psid is either null or not defined.",
	"PMI_CONSOLE_warn_loadPmiData": "Failed to receive XMLHttpRequest data!",
	"PMI_CONSOLE_warn2_loadPmiData": "Failed to receive XMLHttpRequest response!",
	"PMI_CONSOLE_err_loadPmiData": "Failed to retrieve ",
	"PMI_LOGGER_loadPmiDataWithObject": "PMI-loadPmiDataWithObject API: Loading PMI data from the given jaavscript object.",
	"PMI_LOGGER_warn_loadPmiDataWithObject": "PMI-loadPmiDataWithObject API: Object with the given psid is either null or not defined.",
	"PMI_LOGGER_isPmiObject":"PMI-isPmiObject API:Finding if current psid is associated with a pmi object." ,
	"PMI_LOGGER_alignCameraToPmi": "PMI-alignCameraToPmi API:Aligning the camera to a specified PMI object.",
	"PMI_LOGGER_setPmiSelectionMaterial": "PMI-setPmiSelectionMaterial API:Updating the selection material for PMI.",
	"PMI_LOGGER_setPmiColorByPsId": "PMI-setPmiColorByPsId API:Updating the color of the object specified.",
	"PMI_LOGGER_finest_setPmiColorByPsId": "PMI-setPmiColorByPsId API:Updated the color of the object specified.",
	"PMI_LOGGER_setPmiMaterial": "PMI-setPmiMaterial API:Updating the material for PMI.",
	"PMI_LOGGER_finest_setPmiMaterial": "PMI-setPmiMaterial API:Updated the material for PMI.",
	"PMI_LOGGER_getPmiStructureInfo": "PMI-getPmiStructureInfo API:Returning the PMI structure information.",
	"PMI_LOGGER_getDesignGroupsStructureInfo": "PMI-getDesignGroupsStructureInfo API:Retrieving Design Groups structure information.",
	"PMI_LOGGER_getModelViewsStructureInfo": "PMI-getModelViewsStructureInfo API:Retrieving Model Views structure information.",
	"PMI_LOGGER_setSelectionByPsId": "PMI-setSelectionByPsId API:Updating the selection of the given object to: ",
	"PMI_LOGGER_finest_setSelectionByPsId": "PMI-setSelectionByPsId API:Updated the selection of the given object to: ",
	"PMI_LOGGER_setDesignGroupActive": "PMI-setDesignGroupActive API:Updating the sdesign group status",
	"PMI_LOGGER_setModelViewActive": "PMI-setModelViewActive API:Updating the model view status.",
	"PMI_CONSOLE_log_setModelViewActive":"Warning: Feature IDs not supported for Model Groups." ,
	"PMI_CONSOLE_warn__setObjectSelection":"Encountered unknown object (%d) during selection.",
	"PMI_CONSOLE_warn2__setObjectSelection":"ERROR!\nProcessing PMI ID: %s\nFeature not found: %s",

	"ANNOTATION_LOGGER_finest_createGenericAnnotation":"Annotation- createGenericAnnotation API- Returning the annotation id :",
	"ANNOTATION_LOGGER_removeByAnnotationId":"Annotation- removeByAnnotationId API- Removing an individual annotation with given id.",
	"ANNOTATION_LOGGER_finest_removeByAnnotationId":"Annotation- removeByAnnotationId API-Annotation with given id removed successfully.",
	"ANNOTATION_LOGGER_createGenericAnnotation":"Annotation- createGenericAnnotation API- Creating a generic annotation that is outside of the scene.",
	"ANNOTATION_LOGGER_setOnTopByAnnotationId":"Annotation- setOnTopByAnnotationId API- Updating the onTop state for the specified annotation.",
	"ANNOTATION_LOGGER_getOnTopByAnnotationId":"Annotation- getOnTopByAnnotationId API- Returning the onTop state for the specified annotation.",
	"ANNOTATION_LOGGER_finest_getOnTopByAnnotationId":"Annotation- getOnTopByAnnotationId API- onTop state for the specified annotation is returned successfully.",
	"ANNOTATION_LOGGER_warn_getOnTopByAnnotationId":"Annotation- getOnTopByAnnotationId API- Annotation object is undefined.",
	"ANNOTATION_LOGGER_setVisibilityByAnnotationId":"Annotation- setVisibilityByAnnotationId API- Updating the visibility state for the specified annotation.",
	"ANNOTATION_LOGGER_latest_setVisibilityByAnnotationId":"Annotation- setVisibilityByAnnotationId API- Updated the visibility state for the specified annotation.",
	"ANNOTATION_LOGGER_getVisibilityByAnnotationId":"Annotation- getVisibilityByAnnotationId API- Finding the visibility state for the specified annotation.",
	"ANNOTATION_LOGGER_warn_getVisibilityByAnnotationId":"Annotation- getVisibilityByAnnotationId API- Annotation object with the given id is either undefined or null.",
	"ANNOTATION_LOGGER_setPositionByAnnotationId":"Annotation- setPositionByAnnotationId API- Updating the position of the specified annotation.",
	"ANNOTATION_LOGGER_setAnchorPositionByAnnotationId":"Annotation- setAnchorPositionByAnnotationId API- Updating the anchor position of the specified annotation.",
	"ANNOTATION_LOGGER_getPositionByAnnotationId":"Annotation- getPositionByAnnotationId API- Finding the  position of the specified annotation.",
	"ANNOTATION_LOGGER_getAnchorPositionByAnnotationId":"Annotation- getAnchorPositionByAnnotationId API- Finding the  anchor position of the specified annotation.",
	"ANNOTATION_LOGGER_setPositionsByAnnotationId":"Annotation- setPositionsByAnnotationId API-Updating  both the position and anchor position of the specified annotation.",
	"ANNOTATION_LOGGER_setAnnotationsOnTop":"Annotation- setAnnotationsOnTop API-Updating  whether the annotations should all be on top or not from the given parameter.",
	"ANNOTATION_LOGGER_getAnnotationsOnTop":"Annotation- getAnnotationsOnTop API-Finding whether the annotations should all be on top or not.",
	"ANNOTATION_LOGGER_setPositionByAnnotationIdByViewCoordinates":"Annotation- setPositionByAnnotationIdByViewCoordinates API-Updating the position of the specified annotation relative to the current view.",
	"ANNOTATION_LOGGER_addSprite":"Annotation- addSprite API-Adding a sprite annotation to the scene.",
	"ANNOTATION_LOGGER_getSprite":"Annotation- getSprite API-Retrieving all the sprite annotations present in the scene.",

	"PROPERTIES_LOGGER_loadProperties":"Properties- loadProperties API-Loading the properties of the parts with the psid of the model.",
	"PROPERTIES_LOGGER_warn_loadProperties":"Properties- loadProperties API-Failed to retrieve the path given.",
	"PROPERTIES_LOGGER_getProperties":"Properties- getProperties API-Returning the properties of the parts with the psid of the model.",
	"PROPERTIES_LOGGER_loadAllProperties":"Properties- loadAllProperties API-Loading properties of all the models in the scene.",

	"WCS_LOGGER_setVisibility":"WCS- setVisibility API-Updating the visibility state for the WCS.",
	"WCS_LOGGER_getVisibility":"WCS- getVisibility API-Finding the visibility state for the WCS.",
	"WCS_LOGGER_setPosition":"WCS- setPosition API-Repositioning the WCS trihedron.",
	"WCS_LOGGER_getPosition":"WCS- getPosition API-Finding the position of the WCS.",
	"WCS_LOGGER_setSize":"WCS- setSize API-Updating the size of the WCS.",
	"WCS_LOGGER_getSize":"WCS- getSize API-Finding the size of the WCS.",
	"WCS_LOGGER_setOnTop":"WCS- setOnTop API- Updating whether the WCS is rendered on top of or behind the scene geometry.",
	"WCS_LOGGER_getOnTop":"WCS- getOnTop API-Finding whether the WCS is rendered on top of or behind the scene geometry.",

	"CULLING_LOGGER_initialize":"Culling- initialize API-Initializing the culling library.",
	"CULLING_LOGGER_warn_initialize":"Culling- initialize API- Error:",
	"CULLING_LOGGER_warn2_initialize":"Culling- initialize API-worker is not defined or null.",
	"CULLING_LOGGER_unregisterLayerChangeEvent":"Culling- unregisterLayerChangeEvent API-Unregistering a layer change event for the whole view.",
	"CULLING_LOGGER_registerLayerChangeEvent":"Culling- registerLayerChangeEvent API-Registering a layer change event for the whole view.",
	"CULLING_LOGGER_getCurrentLayerByPsId":"Culling- getCurrentLayerByPsId API- Finding an object's current layer.",
	"CULLING_LOGGER_warn_getCurrentLayerByPsId":"Culling-getCurrentLayerByPsId API- object for given psid is not defined.",
	"CULLING_LOGGER_setCullableObjects":"Culling- setCullableObjects API- Setting the list of cullable objects.",
	"CULLING_LOGGER_setBatchFrames":"Culling- setBatchFrames API- Setting the frames between processing cull batches.",
	"CULLING_LOGGER_getBatchFrames":"Culling- getBatchFrames API- Returning the frames between processing cull batches.",
	"CULLING_LOGGER_setBatchSize":"Culling- setBatchSize API- Updating the number of cull actions to process per cull batch.",
	"CULLING_LOGGER_getBatchSize":"Culling- getBatchSize API- Returning the number of cull actions to process per cull batch.",
	"CULLING_LOGGER_setBoundary1Size":"Culling- setBoundary1Size API-Updating the screen radius of the object when the first cull action should occur.",
	"CULLING_LOGGER_getBoundary1Size":"Culling- getBoundary1Size API-Returning  the screen radius of the object when the first cull action should occur.",
	"CULLING_LOGGER_setBoundary2Size":"Culling- setBoundary2Size API-Updating  the screen radius of the object when the second cull action should occur.",
	"CULLING_LOGGER_getBoundary2Size":"Culling- getBoundary2Size API-Returning  the screen radius of the object when the second cull action should occur.",
	"CULLING_LOGGER_setBoundarySizes":"Culling- setBoundarySizes API-Updating  the screen radius of the object when the first and second cull action should occur.",
	"CULLING_LOGGER_useDefaultActions":"Culling- useDefaultActions API-Updating whether the culling module should use default culling actions or not.",
	"CULLING_LOGGER_isUsingDefaultActions":"Culling- isUsingDefaultActions API-Finding whether the the culling module is using default culling actions or not.",
	"CULLING_LOGGER_setUseLoadingUnloading":"Culling- setUseLoadingUnloading API-Updating  whether the culling actions include loading/unloading (for use with default actions only).",
	"CULLING_LOGGER_isUsingLoadingUnloading":"Culling- isUsingLoadingUnloading API-Finding whether culling actions include laoding/unloading.",
	"CULLING_LOGGER_setActive":"Culling- setActive API-Updating whether culling occurs or not.",
	"CULLING_LOGGER_isActive":"Culling- isActive API-Finding whether culling occurs or not.",
	"CULLING_LOGGER_setSuspendOnMovement":"Culling- setSuspendOnMovement API-Updating whether culling should still occur while rotating/panning or not.",
	"CULLING_LOGGER_getSuspendOnMovement":"Culling- getSuspendOnMovement API-Finding whether culling should still occur while rotating/panning or not.",
	"CULLING_LOGGER_updateObjects":"Culling- updateObjects API-Updating all currently cullable objects.",
	"CULLING_LOGGER_addCullableObjectByPsId":"Culling- addCullableObjectByPsId API-Adding the object identified by given psid to the list of cullable objects.",
	"CULLING_LOGGER_removeCullableObjectByPsId":"Culling- removeCullableObjectByPsId API-Removing the object identified by given psid to the list of cullable objects.",

	"SECTION_LOGGER_registerPlaneSelectionEvent":"Section- registerPlaneSelectionEvent API-Registering section plane selected event.",
	"SECTION_LOGGER_unregisterPlaneSelectionEvent":"Section- unregisterPlaneSelectionEvent API-Unregistering section plane selected event.",
	"SECTION_LOGGER_setSectionActive":"Section- setSectionActive API-Enabling or disabling sectioning depending on the given parameter",
	"SECTION_LOGGER_getSectionActive":"Section- getSectionActive API-Finding if the sectioning is enabled.",
	"SECTION_LOGGER_clear":"Section- clear API-Clearing all section plane in the scene.",
	"SECTION_LOGGER_addSectionPlane":"Section- addSectionPlane API-Adding a section plane to the scene.",
	"SECTION_LOGGER_finest_addSectionPlane":"Section- addSectionPlane API-Plane id created: ",
	"SECTION_LOGGER_removeSectionPlane":"Section- removeSectionPlane API-Removing a section plane from the scene.",
	"SECTION_LOGGER_setSectionSide":"Section- setSectionSide API- Updating the sectioning side of section plane.",
	"SECTION_LOGGER_getSectionSide":"Section- getSectionSide API-Finding the sectioning side of section plane.",
	"SECTION_LOGGER_warn_getSectionSide":"Section- getSectionSide API-Section plane is not defined.",
	"SECTION_LOGGER_setSectionDirection":"Section- setSectionDirection API-Updating the direction/normal of section plane.",
	"SECTION_LOGGER_getSectionDirection":"Section- getSectionDirection API-Finding the direction/normal of section plane.",
	"SECTION_LOGGER_info2_getSectionDirection":"Section- getSectionDirection API-Section plane is undefined.",
	"SECTION_LOGGER_setSectionPosition":"Section- setSectionPosition API-Updating the position of section plane.",
	"SECTION_LOGGER_getSectionPosition":"Section- getSectionPosition API-Finding the position of section plane.",
	"SECTION_LOGGER_warn_getSectionPosition":"Section- getSectionPosition API-Section plane is undefined.",
	"SECTION_LOGGER_setSelectionById":"Section- setSelectionById API-Updating the selection state of a section plane.",
	"SECTION_LOGGER_getSelectionById":"Section- getSelectionById API-Finding the selection state of a section plane.",
	"SECTION_LOGGER_finest_getSelectionById":"Section- getSelectionById API-Selection sate of the plane found.",
	"SECTION_LOGGER_warn_getSelectionById":"Section- getSelectionById API-Section plane is not defined.",
	"SECTION_LOGGER_setSelectionAll":"Section- setSelectionAll API-Updating the selection state for all section planes.",

	"SCENEGRAPH_LOGGER_threeErr":"Raycaster: Unsupported camera type.",
	"SCENEGRAPH_LOGGER_threeWarn":"Raycaster.intersectObjects: objects is not an Array.",

	 "SNAPSHOT_LOGGER_setSnapshotEnabled":"Snapshot- setSnapshotEnabled API-Enabling or disabling snapshot creation depending on the argument.",
	 "SNAPSHOT_LOGGER_getSnapshotEnabled":"Snapshot- getSnapshotEnabled API-Retrieving the current snapshot-enabled state.",
	 "SNAPSHOT_LOGGER_createSnapshotPNG":"Snapshot- createSnapshotPNG API-Creating a snapshot based on the current scenegraph state.",
	 "SNAPSHOT_LOGGER_print":"Snapshot- print API-Printing the current contents of the viewer.",
	 "SNAPSHOT_LOGGER_warn_print":"Snapshot- print API-Snapshot is disabled.",

	 "MEASUREMENT_LOGGER_registerMeasurementEvent":"Measurement- registerMeasurementEvent API-Registering measurement event for Measurement Event notifications.",
	 "MEASUREMENT_LOGGER_unregisterMeasurementEvent":"Measurement- unregisterMeasurementEvent API-Removing the given callback from Measurement Event notifications.",
	 "MEASUREMENT_LOGGER_measure":"Measurement- measure API-Performing measurement operation given a specified measurement parameters.",

	 "XTBODLOADER_CONSOLE_warn_loadFromBinary":"Failed to load XT geometry - Binary data undefined.",

	 "THREEEXTENSIONS_CONSOLE_err_updateBuffer":"THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.",
	 "THREEEXTENSIONS_CONSOLE_err_WebGLRenderer":"PLMVisWeb.WebGLRenderer:",
	 "THREEEXTENSIONS_CONSOLE_err_setupVertexAttributes":"PLMVisWeb.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.",
	 "THREEEXTENSIONS_CONSOLE_err_render":"PLMVisWeb.WebGLRenderer.render: camera is not an instance of THREE.Camera.",
	 "THREEEXTENSIONS_CONSOLE_err_uploadTexture":"Float Depth Texture only supported in WebGL2.0",
	 "THREEEXTENSIONS_CONSOLE_err_setupDepthTexture":"Depth Texture with cube render targets is not supported!",
	 "THREEEXTENSIONS_CONSOLE_err2_setupDepthTexture":"renderTarget.depthTexture must be an instance of THREE.DepthTexture.",
	 "THREEEXTENSIONS_CONSOLE_err_depthTexture":"target.depthTexture not supported in Cube render targets.",
	 "THREEEXTENSIONS_CONSOLE_err_readRenderTargetPixels":"PLMVisWeb.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.",
	 "THREEEXTENSIONS_CONSOLE_err2_readRenderTargetPixels":"PLMVisWeb.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.",
	 "THREEEXTENSIONS_CONSOLE_err3_readRenderTargetPixels":"PLMVisWeb.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.",
	 "THREEEXTENSIONS_CONSOLE_err4_readRenderTargetPixels":"PLMVisWeb.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete."

}
